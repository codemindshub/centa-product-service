// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InventoryMovementType {
  stock_in
  stock_out
  stock_removed
  transfer
}

enum StockTransferType {
  transfer_in
  transfer_out
}

enum StockTransferStatus {
  in_transit
  completed 
  canceled
}

model Product {
  sku String @id @db.VarChar(100)
  name String @db.VarChar(255)  
  description String
  price Decimal
  cost_price Decimal
  category_id String?
  category Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  barcode String @db.VarChar(48)
  max_stock_threshold Int
  min_stock_threshold Int
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  variants ProductVariant[]
  inventory Inventory?
  inventory_transfers InventoryTransfer[]
}

model ProductVariant {
  id String @id @default(uuid())
  product_sku String  @db.VarChar(100)
  product Product @relation(fields: [product_sku], references: [sku], onDelete: Cascade)
  variant_name String @db.VarChar(200) @unique
  variant_value String @db.VarChar(200) @unique
  brand String @db.VarChar(200)
  unit_price Decimal
  cost_price Decimal
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([variant_name, variant_value, product_sku, brand])
}

model Category {
  id String @id @default(uuid())
  name String @db.VarChar(200)
  parent_id String?
  parent_category Category? @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryHierarchy")
  description String @db.VarChar(500)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  products Product[]
}

model Inventory {
  id String @id @default(uuid())
  product_sku String @unique  @db.VarChar(100)
  product Product @relation(fields: [product_sku], references: [sku], onDelete: Cascade)
  quantity Int
  qauntity_reserved Int @default(0)
  batch_number String @db.VarChar(100)
  location String
  manufacturing_date DateTime
  expiry_date DateTime
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  inventoryLogs InventoryLog[] @relation("inventory")
  source_inventoryLogs InventoryLog[] @relation("source_inventory")
  destination_invevntoryLogs InventoryLog[] @relation("destination_inventory")
}

model InventoryLog {
  id String @id @default(uuid())
  inventory_id String
  inventory Inventory @relation("inventory",fields: [inventory_id], references: [id])
  type InventoryMovementType
  qunatity Int
  source_inventory_id String
  source_inventory Inventory @relation("source_inventory", fields: [source_inventory_id], references: [id])
  destination_inventory_id String
  destination_inventory Inventory @relation("destination_inventory", fields: [destination_inventory_id], references: [id])
  creator_id String
  movement_reason String @db.VarChar(500)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model InventoryTransfer {
  id String @id @default(uuid())
  product_id String
  product Product @relation(fields: [product_id], references: [sku])
  // origin String 
  // destination
  quantity Int
  transfer_type StockTransferType
  tracking_number String @db.VarChar(50)
  status StockTransferStatus
  transfer_date DateTime
  receipt_date DateTime
  created_at DateTime @default(now())
  creator_id String
}

// confirm the relationship between the product, category and the inventory
// add indexes only when your table grows